diff --git a/uuid.admin.inc b/uuid.admin.inc
index 679aea4..f5aa77a 100644
--- a/uuid.admin.inc
+++ b/uuid.admin.inc
@@ -21,6 +21,11 @@ function uuid_admin_form() {
     '#value' => t('Create missing UUIDs'),
     '#submit' => array('uuid_admin_sync_submit'),
   );
+  $form['sync']['resync_submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Rebuild all UUIDs'),
+    '#submit' => array('uuid_admin_resync_submit'),
+  );
 
   return system_settings_form($form);
 }
@@ -34,6 +39,14 @@ function uuid_admin_sync_submit() {
 }
 
 /**
+ * Submit handler for the UUID resync.
+ */
+function uuid_admin_resync_submit() {
+  uuid_resync_all();
+  drupal_set_message(t('Recreated all UUIDs.'));
+}
+
+/**
  * Page callback to display Devel information about a UUID entity.
  */
 function uuid_devel_load_by_uuid($entity_type, $entity) {
diff --git a/uuid.drush.inc b/uuid.drush.inc
index afb44ad..0032b7d 100644
--- a/uuid.drush.inc
+++ b/uuid.drush.inc
@@ -14,6 +14,10 @@ function uuid_drush_command() {
     'description' => 'Create missing UUIDs for enabled entities.',
     'aliases' => array('uuid-create'),
   );
+  $items['uuid-recreate-all'] = array(
+    'description' => 'Recreates UUIDs for all enabled entities.',
+    'aliases' => array('uuid-recreate'),
+  );
   return $items;
 }
 
@@ -24,6 +28,8 @@ function uuid_drush_help($section) {
   switch ($section) {
     case 'drush:uuid-create-missing':
       return dt("This command will create missing UUIDs for those content types specified in the module settings for automatic generation.");
+    case 'drush:uuid-recreate-all':
+      return dt("This command will drop all current UUIDs and recreate them for those content types specified in the module settings for automatic generation.");
   }
 }
 
@@ -39,3 +45,16 @@ function drush_uuid_create_missing() {
   drush_log(dt('Beginning bulk creation of UUIDs.'), 'ok');
   uuid_sync_all();
 }
+
+/**
+ * Drush command callback.
+ */
+function drush_uuid_recreate_all() {
+  if (!drush_confirm(dt('Are you sure?'))) {
+    return drush_user_abort();
+  }
+  module_load_include('inc', 'uuid', 'uuid');
+
+  drush_log(dt('Beginning bulk rebuilding of all UUIDs.'), 'ok');
+  uuid_resync_all();
+}
diff --git a/uuid.inc b/uuid.inc
index ca69632..2a62780 100644
--- a/uuid.inc
+++ b/uuid.inc
@@ -45,6 +45,15 @@ function uuid_sync_all() {
 }
 
 /**
+ * Regenerate all missing UUIDs.
+ */
+function uuid_resync_all() {
+  module_invoke_all('uuid_resync');
+  // call sync to rebuild all as core resync wipes them all
+  module_invoke_all('uuid_sync');
+}
+
+/**
  * Generates a UUID URI for an entity.
  *
  * @param object $entity
diff --git a/uuid.module b/uuid.module
index cb8b0fd..c244058 100644
--- a/uuid.module
+++ b/uuid.module
@@ -185,6 +185,39 @@ function _uuid_sync_table($table, $id_field, $uuid_field) {
 }
 
 /**
+ * Implements hook_uuid_resync().
+ */
+function uuid_uuid_resync() {
+  foreach (entity_get_info() as $entity_type => $info) {
+    if (isset($info['uuid']) && $info['uuid'] == TRUE && !empty($info['entity keys']['uuid'])) {
+      _uuid_empty_table($info['base table'], $info['entity keys']['id'], $info['entity keys']['uuid']);
+      if (!empty($info['entity keys']['revision uuid'])) {
+        _uuid_empty_table($info['revision table'], $info['entity keys']['revision'], $info['entity keys']['revision uuid']);
+      }
+    }
+  }
+}
+
+/**
+ * Helper function that updates a table to wipe UUIDs
+ */
+function _uuid_empty_table($table, $id_field, $uuid_field) {
+  // Fetch empty records.
+  $result = db_select($table, 't')
+    ->fields('t', array($id_field))
+    ->condition(db_or()->condition($uuid_field, '')->isNotNull($uuid_field))
+    ->execute();
+
+  // Update empty records.
+  foreach ($result as $record) {
+    db_update($table)
+      ->fields(array($uuid_field => ''))
+      ->condition($id_field, $record->{$id_field})
+      ->execute();
+  }
+}
+
+/**
  * Implements hook_features_api().
  *
  * The Features support consists of exporting entities from a Deploy
diff --git a/uuid.test b/uuid.test
index 34307fc..792459a 100644
--- a/uuid.test
+++ b/uuid.test
@@ -608,3 +608,86 @@ class UUIDSyncTestCase extends UUIDTestCase {
     $this->assertUUID($user_test->uuid, 'User UUID was generated when clicking the sync button.');
   }
 }
+
+/**
+ * Tests for the UUID rebuilding.
+ */
+class UUIDRebuildTestCase extends UUIDTestCase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function getInfo() {
+    return array(
+      'name' => 'UUID rebuild',
+      'description' => 'Tests the UUID rebuilding.',
+      'group' => 'UUID',
+    );
+  }
+
+  /**
+   * Helper function that asserts that a database table column exists.
+   *
+   * @todo
+   *   There are something weird around this assertion.
+   */
+  function assertTableColumn($table, $column, $message) {
+    $this->assertTrue(db_field_exists($table, $column), $message);
+  }
+
+  /**
+   * Tests rebuilding UUIDs for entities.
+   */
+  function testRebuild() {
+    // this test starts the same as Sync but adds additional tests
+    // after we assert that the initial case of granting UUIDs was successful
+    // These entities will not have UUID from the start, since the UUID module
+    // isn't installed yet.
+    $user = $this->drupalCreateUser();
+    $node = $this->drupalCreateNode();
+
+    $this->assertTrue(!isset($node->uuid), "Node has no UUID before installation of UUID module.");
+    $this->assertTrue(!isset($node->vuuid), "Node has no revision UUID before installation of UUID module.");
+    $this->assertTrue(!isset($user->uuid), "User has no UUID before installation of UUID module.");
+
+    // Now enable the UUID module.
+    module_enable(array('uuid'), TRUE);
+    drupal_flush_all_caches();
+    drupal_static_reset();
+
+    // Check that the UUID column was generated for {node}.
+    $this->assertTableColumn('node', 'uuid', 'UUID column was generated for the node table.');
+    $this->assertTableColumn('node_revision', 'vuuid', 'Revision UUID column was generated for the node_revision table.');
+    $this->assertTableColumn('users', 'uuid', 'UUID column was generated for the user table.');
+
+    // Login with a user and click the sync button.
+    $web_user = $this->drupalCreateUser(array('administer uuid'));
+    $this->drupalLogin($web_user);
+    $this->drupalPost('admin/config/system/uuid', array(), t('Create missing UUIDs'));
+
+    // Test if UUID was generated for nodes.
+    $node_test = node_load($node->nid, FALSE, TRUE);
+    $this->assertUUID($node_test->uuid, 'Node UUID was generated when clicking the sync button.');
+    $this->assertUUID($node_test->vuuid, 'Node revision UUID was generated when clicking the sync button.');
+
+    // Test if UUID was generated for users.
+    $user_test = user_load($user->uid, TRUE);
+    $this->assertUUID($user_test->uuid, 'User UUID was generated when clicking the sync button.');
+
+    // now we rebuild
+    // Login with a user and click the rebuild button.
+    $web_user = $this->drupalCreateUser(array('administer uuid'));
+    $this->drupalLogin($web_user);
+    $this->drupalPost('admin/config/system/uuid', array(), t('Rebuild all UUIDs'));
+
+     // Test if UUID was rebuilt for nodes.
+    $node_compare = node_load($node->nid, FALSE, TRUE);
+    $this->assertNotEqual($node_test->uuid, $node_compare->uuid, 'Node UUID was correct rebuilt.');
+    $this->assertNotEqual($node_test->vuuid, $node_compare->vuuid, 'Node revision UUID correct rebuilt.');
+
+    // Test if UUID was rebuilt for users.
+    $user_compare = user_load($user->uid, TRUE);
+    $this->assertUUID($user_test->uuid, 'User UUID was generated when clicking the sync button.');
+    $this->assertNotEqual($user_test->uuid, $user_compare->uuid, 'User UUID correctly rebuilt.');
+  }
+}
