<?php
/**
 * @file
 * Displays the time it will take to read content on your site.
 */

define('READ_TIME_WPM', 275);
define('READ_TIME_DEFAULT_CRITERION', 'words');
// 12 seconds per image, this is from a medium article suggesting it is reasonable
define('READ_TIME_IMAGE', 12);

/**
 * Implements hook_form_FORM_ID_alter() for node_type_form.
 */
function read_time_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $type = $form['#node_type'];
  $defaults = read_time_defaults();

  // Get words fields in this bundle.
  $field_instances = field_info_instances('node', $type->type);
  foreach ($field_instances as $field => $field_instance) {
    $field_info = field_info_field($field);
    if (in_array($field_info['type'], array('text', 'text_long', 'text_with_summary'))) {
      $fields[$field] = $field_instance['label'];
    }
  }

  $form['read_time'] = array(
    '#type' => 'fieldset',
    '#title' => t('Read time'),
    '#group' => 'additional_settings',
  );
  $form['read_time']['read_time_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Fields'),
    '#description' => t('Calculate the combined read time of these fields.'),
    '#options' => $fields,
    '#multiple' => TRUE,
    '#default_value' => variable_get('read_time_fields_' . $type->type, $defaults['fields']),
  );
  $form['read_time']['read_time_wpm'] = array(
    '#type' => 'textfield',
    '#title' => t('Words per minute'),
    '#description' => t('Average reading speed used for the calculation.'),
    '#size' => 2,
    '#maxlength' => 3,
    '#element_validate' => array('element_validate_integer_positive'),
    '#default_value' => variable_get('read_time_wpm_' . $type->type, $defaults['wpm']),
  );
  $form['read_time']['read_time_format'] = array(
    '#type' => 'select',
    '#title' => t('Format'),
    '#description' => t('How the calculation will be formatted.'),
    '#options' => array(
      'hour_short' => t('Hours & minutes, short (1 hr, 5 mins)'),
      'hour_long' => t('Hours & minutes, long (1 hour, 5 minutes)'),
      'min_short' => t('Minutes, short (65 mins)'),
      'min_long' => t('Minutes, long (65 minutes)'),
    ),
    '#default_value' => variable_get('read_time_format_' . $type->type, $defaults['format']),
  );
  $form['read_time']['read_time_display'] = array(
    '#type' => 'textfield',
    '#title' => t('Read time display'),
    '#description' => t("How the read time will be displayed. Use <em>%read_time</em> to output the read time formatted as above."),
    '#default_value' => variable_get('read_time_display_' . $type->type, $defaults['display']),
  );
  $form['read_time']['read_time_node_view'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display on node view'),
    '#description' => t("This will attach the counts to the node view of this type. Disable this if you will render read_time via a block or other custom implementation."),
    '#default_value' => variable_get('read_time_node_view_' . $type->type, $defaults['node_view']),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function read_time_field_extra_fields() {
  foreach (field_info_bundles('node') as $bundle => $bundle_info) {
    $extra['node'][$bundle]['display'] = array(
      'read_time' => array(
        'label' => t('Read time'),
        'description' => t('Read time'),
        'weight' => 0,
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_read_time_criteria().
 * Allows you to add new criteria for read time engagement.
 * This is an example of the core implementation.
 * @return array array items
 */
function read_time_read_time_criteria() {
  return array(
    'words' => 'read_time_calculate',
    'video' => 'read_time_calculate',
    'audio' => 'read_time_calculate',
    'img' => 'read_time_calculate',
    'svg' => 'read_time_calculate',
  );
}

/**
 * Implements hook_read_time_criteria().
 * Allows you to add new criteria for read time engagement.
 * This is an example of the core implementation.
 * @return array  an array of criteria keys and callback functions
 */
function read_time_get_criteria() {
  $criteria = &drupal_static(__FUNCTION__);
  if (!isset($criteria)) {
    $criteria = module_invoke_all('read_time_criteria');
    drupal_alter('read_time_criteria', $criteria);
    // validate that the callbacks exist so we don't have to later on
    foreach ($criteria as $key => $callback) {
      if (!function_exists($callback)) {
        unset($criteria[$key]);
      }
    }
  }
  return $criteria;
}

/**
 * Process the read time of a node.
 * @param  object $node     node object to evaluate
 * @param  string $criterion criterion to assemble otherwise all criteria
 * @return array            array of the criteria in question
 */
function _read_time_evaluate($node, $criterion = NULL) {
  // assemble criteria
  $criteria = read_time_get_criteria();
  $read_time = array('metadata' => array());
  // pull in the defaults for the user; typically global in scope
  $defaults = read_time_defaults();

  // Get read time bundle settings.
  $fields = variable_get('read_time_fields_' . $node->type, $defaults['fields']);

  // Get input data from fields to calculate read time off
  $field_data = '';
  foreach ($fields as $field) {
    $field_items = field_get_items('node', $node, $field);
    if (is_array($field_items)) {
      foreach ($field_items as $field_item) {
        if (isset($field_item['format'])) {
          $field_data .= check_markup($field_item['value'], $field_item['format']);
        }
        else {
          $field_data .= $field_item['value'];
        }
      }
    }
  }
  // see if we want one or all criterion
  if (is_null($criterion)) {
    // loop through all criteria and build out
    foreach ($criteria as $key => $callback) {
      $read_time[$key] = call_user_func_array($callback, array($node, $field_data, $key));
    }
  }
  // ensure this is a valid criterion if singular
  elseif (isset($criteria[$criterion])) {
    $read_time[$criterion] = call_user_func_array($criteria[$criterion], array($node, $field_data, $criterion));
  }
  // allow other projects to evaluate read_time as needed
  drupal_alter('read_time_evaluate', $read_time, $node, $field_data);
  return $read_time;
}

/**
 * Implements hook_read_time_evaluate_alter().
 */
function read_time_read_time_evaluate_alter(&$read_time, $node, $field_data) {
  $preg = '/<iframe(.*?)>/s';
  // pregmatch the anchor and title for the heading
  preg_match_all($preg, $field_data, $results);
  foreach ($results[0] as $result) {
    // sniff out youtube
    if (_read_time_strpos_arr($result, array('youtube', 'youtu.be'))) {
      $read_time['video']++;
      if (!isset($read_time['metadata']['youtube'])) {
        $read_time['metadata']['youtube'] = 0;
      }
      $read_time['metadata']['youtube']++;
    }
    // sniff out vimeo
    if (_read_time_strpos_arr($result, array('vimeo'))) {
      $read_time['video']++;
      if (!isset($read_time['metadata']['vimeo'])) {
        $read_time['metadata']['vimeo'] = 0;
      }
      $read_time['metadata']['vimeo']++;
    }
    // sniff out soundcloud
    if (_read_time_strpos_arr($result, array('soundcloud'))) {
      $read_time['audio']++;
      if (!isset($read_time['metadata']['soundcloud'])) {
        $read_time['metadata']['soundcloud'] = 0;
      }
      $read_time['metadata']['soundcloud']++;
    }
  }
}

/**
 * Helper function to look for multiple needles in haystack.
 * @param  string $haystack  string to search in
 * @param  array $needle     array of strings to search for
 * @return mixed             position if found, otherwise false
 */
function _read_time_strpos_arr($haystack, $needles) {
  // account for single value
  if (!is_array($needles)) {
    $needles = array($needles);
  }
  // loop through and a return position if it exists
  foreach ($needles as $needle) {
    if (($pos = strpos($haystack, $needle)) !== false) {
      return $pos;
    }
  }
  return false;
}

/**
 * Implements hook_node_insert().
 */
function read_time_node_insert($node) {
  $read_time = _read_time_evaluate($node);

  db_insert('read_time')
    ->fields(array(
      'nid' => $node->nid,
      'read_time' => serialize($read_time),
    ))
    ->execute();
}

/**
 * Implements hook_node_update().
 */
function read_time_node_update($node) {
  $read_time = _read_time_evaluate($node);

  db_merge('read_time')
    ->key(array(
      'nid' => $node->nid,
    ))
    ->fields(array(
      'read_time' => serialize($read_time),
    ))
    ->execute();
}

/**
 * Implements hook_node_load().
 */
function read_time_node_load($nodes, $types) {
  // add read time to the node object itself so we can reference
  // the data elsewhere. This also opens the door for additional
  // timed items that can impact reading.
  foreach ($nodes as $node) {
    $record = db_query('SELECT read_time FROM {read_time} WHERE nid = :nid', array(':nid' => $node->nid))->fetchField();
    // ensure a record exists otherwise build it out now
    if (empty($record)) {
      $read_time = _read_time_evaluate($node);
      db_insert('read_time')
        ->fields(array(
          'nid' => $node->nid,
          'read_time' => serialize($read_time),
        ))
        ->execute();
      $nodes[$node->nid]->read_time = $read_time;
    }
    else {
      $record = unserialize($record);
      $nodes[$node->nid]->read_time = $record;
    }
  }
}

/**
 * Implements hook_node_view().
 */
function read_time_node_view($node, $view_mode, $langcode) {
  // Get read time field settings.
  $display_settings = field_extra_fields_get_display('node', $node->type, $view_mode);
  $settings = $display_settings['read_time'];
  // make sure this is visible first
  if ($settings['visible']) {
    // Calculate read time if it doesn't exist and save to database.
    if (empty($node->read_time)) {
      $node->read_time = _read_time_evaluate($node);

      db_merge('read_time')
        ->key(array(
          'nid' => $node->nid,
        ))
        ->fields(array(
          'read_time' => serialize($node->read_time),
        ))
        ->execute();
    }
    // make sure we want to render out with nodes in this way globally
    if (variable_get('read_time_node_view_' . $node->type, TRUE)) {
      // Display read time with node.
      $node->content['read_time'] = array(
        '#markup' => '<span class="read-time">' . theme('read_time', array('node' => $node)) . '</span>',
        '#weight' => $settings['weight'],
      );
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function read_time_node_delete($node) {
  db_delete('read_time')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_type_delete().
 */
function read_time_node_type_delete($info) {
  variable_del('read_time_fields_' . $info->type);
  variable_del('read_time_wpm_' . $info->type);
  variable_del('read_time_format_' . $info->type);
  variable_del('read_time_display_' . $info->type);
  variable_del('read_time_node_view_' . $info->type);
}

/**
 * Callback to calculate read time for words and media elements.
 */
function read_time_calculate($node, $field_data, $criterion = READ_TIME_DEFAULT_CRITERION) {
  // evaluation the "words" based on the criterion passed in
  switch ($criterion) {
    case 'words':
      // Calculate words by striping all tags; this is easy
      $count = str_word_count(strip_tags($field_data));
    break;
    case 'audio':
    case 'img':
    case 'svg':
    case 'video':
      // build our preg match to find the exact tags
      $preg = '/<' . $criterion . '(.*?)>/s';
      // pregmatch the anchor and title for the heading
      preg_match_all($preg, $field_data, $results);
      $count = count($results[0]);
    break;
  }
  return $count;
}

/**
 * Implements hook_theme().
 */
function read_time_theme($existing, $type, $theme, $path) {
  return array(
    'read_time' => array(
      'variables' => array(
        'node' => NULL,
      ),
    ),
  );
}

/**
 * Default theme function for video.
 */
function theme_read_time($variables) {
  $defaults = read_time_defaults();
  $node = $variables['node'];
  // Get read time bundle settings.
  $format = variable_get('read_time_format_' . $node->type, $defaults['format']);
  $display = variable_get('read_time_display_' . $node->type, $defaults['display']);
  $wpm = variable_get('read_time_wpm_' . $node->type, $defaults['wpm']);

  // @todo this needs to be able to evaluation more then just words
  $words = $node->read_time['words'];
  // convert words into time
  $time = round(($words / $wpm), 3);

  // Format read time.
  if (in_array($format, array('hour_short', 'hour_long'))) {
    $hours = floor($time / 60);
    $minutes = ceil(fmod($time, 60));
  }
  else {
    $minutes = ceil($time);
  }
  if (in_array($format, array('hour_long', 'min_long'))) {
    $hour_suffix = 'hour';
    $min_suffix = 'minute';
  }
  else {
    $hour_suffix = 'hr';
    $min_suffix = 'min';
  }
  $minute_format = format_plural($minutes, '1 ' . $min_suffix, '@count ' . $min_suffix . 's');
  if (!empty($hours)) {
    $hour_format = format_plural($hours, '1 ' . $hour_suffix, '@count ' . $hour_suffix . 's');
    $read_time = format_string('@h, @m', array('@h' => $hour_format, '@m' => $minute_format));
  }
  else {
    $read_time = $minute_format;
  }

  return check_plain(str_replace('%read_time', $read_time, $display));
}

/**
 * Store default settings.
 */
function read_time_defaults() {
  // statically cache future calls
  $defaults = &drupal_static(__FUNCTION__);
  if (!isset($defaults)) {
    $defaults = array(
      'fields' => array('body'),
      'wpm' => READ_TIME_WPM,
      'format' => 'hour_short',
      'display' => t('Read time: %read_time'),
      'node_view' => TRUE,
    );
    drupal_alter('read_time_defaults', $defaults);
  }
  return $defaults;
}

/**
 * Implements hook_entity_property_info_alter().
 *
 * @see entity_entity_property_info_alter()
 */
function read_time_entity_property_info_alter(&$info) {
  $criteria = read_time_get_criteria();
  // add the read time properties into scope of all entity API data
  // this will make it available to Services / RestWS and full Entity Ops
  foreach ($info['node']['bundles'] as $key => &$bundle) {
    $bundle['properties']['read_time_total'] = array(
      'label' => t("Read time total"),
      'description' => t("The total read time of all elements in read time"),
      'type' => 'integer',
      'getter callback' => 'read_time_node_get_properties',
      'computed' => TRUE,
    );
    // wire in the rest of the criteria
    foreach($criteria as $key => $callback) {
      $bundle['properties']['read_time_' . $key] = array(
        'label' => t('Read time @key', array('@key' => $key)),
        'description' => t('The count of all @key elements', array('@key' => $key)),
        'type' => 'integer',
        'getter callback' => 'read_time_node_get_properties',
        'computed' => TRUE,
      );
    }
  }
}

/**
 * Callback for getting read_time properties.
 * @see read_time_entity_property_info_alter()
 */
function read_time_node_get_properties($node, array $options, $name) {
  switch ($name) {
    case 'read_time_total':
      $defaults = read_time_defaults();
      $wpm = variable_get('read_time_wpm_' . $node->type, $defaults['wpm']);
      // mix in children if it is set
      if (isset($node->read_time['metadata']['children'])) {
        foreach ($node->read_time['metadata']['children'] as $key => $value) {
          $node->read_time[$key] += $value;
        }
      }
      $time = round(($node->read_time['words'] + (READ_TIME_IMAGE * $node->read_time['img']) / $wpm), 3);
      return $time;
    break;
    default:
      // ridiculous looking, but this allows us to
      // hit all of the properties of read_time that
      // are then kicked out to entity spec as read_time_{name}
      // such as read_time_words and read_time_img
      $tmp = explode('_', $name);
      // kick the last part off so we know what key to look for
      $property = array_pop($tmp);
      // if its set we're golden, otherwise it's NULL
      if (isset($node->read_time[$property])) {
        return $node->read_time[$property];
      }
      return NULL;
    break;
  }
}
