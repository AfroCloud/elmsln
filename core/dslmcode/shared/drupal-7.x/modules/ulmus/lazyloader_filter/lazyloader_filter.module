<?php
/*******************************************************************************
 * Drupal Hooks */
/**
 * Implements hook_filter_info().
 */
function lazyloader_filter_filter_info() {
  $filters['lazyloader_filter'] = array(
    'title' => t('Lazyloader Filter'),
    'description' => t('Converts &lt;img&gt; tags to load via lazyloader. Automatically applied when enabled as a text filter.'),
    'process callback' => '_lazyloader_filter_filter_process',
  );
  return $filters;
}

/**
 * Implements hook_theme()
 */
function lazyloader_filter_theme($existing, $type, $theme, $path) {
  return array(
    'lazyloader_filter_image' => array(
      'variables' => array('attr' => NULL, 'attr_str' => NULL),
      'template' => 'lazyloader-filter-image',
    ));
}

/**
 * Implements hook_form_FORM_ID_alter() -> lazyloader_admin
 */
function lazyloader_filter_form_lazyloader_admin_alter(&$form, &$form_state) {
  $form['#submit'][] = '_lazyloader_filter_admin_submit';
}

/*******************************************************************************
 * Helper functions */
/**
 * Replace <img> tags with lazy loading images
 */
function _lazyloader_filter_filter_process($text) {
  // current lazyloader settings
  $settings = variable_get('lazyloader');

  // if lazyloading is enabled, use lazy loading
  if ($settings['enabled']) return preg_replace_callback('/<img\b[^>]*>/', '_lazyloader_filter_process_matches', $text);

  // not using lazy loading
  return $text;
}

/**
 * Process the image tags found with preg_replace_callback()
 */
function _lazyloader_filter_process_matches($matches) {
  $img  = explode(' ', array_shift($matches)); // only need the first element due to the search pattern in use.
  $attr = array();                             // where we store the attributes
  $attr_str = '';                              // a compiled attribute string

  foreach($img as $id => $part) {
    $part = explode('=', $part);    // explode each img part
    if (count($part) > 1) {         // if there was a '=' this is an attribute
      $attr[$part[0]] = $part[1];   // all img tag atr are added to attr array for readding later
      if ($part[0] != 'src') $attr_str .= $part[0].'='.$part[1].' ';  // recombine - leave out the src from the attr_str - added sep.
    }
  }
  // Return the themed image
  return theme('lazyloader_filter_image', array('attr' => $attr, 'attr_str' => $attr_str));
}

/**
 * Additional submit handler for the lazyload admin form
 */
function _lazyloader_filter_admin_submit($form, $form_state) {
  // we need to flush the field cache if things change
  if ($form['lazyloader']['enabled']['#default_value'] != $form['lazyloader']['enabled']['#value']) {
    cache_clear_all('*', 'cache_field', TRUE);
  }
}
