<?php
/**
 * @file
 * Code for the CIS Course Authority feature.
 */

include_once 'cis_course_authority.features.inc';

/**
 * Implements hook_node_insert().
 */
function cis_course_authority_node_presave($node) {
  // create a master section when a course is created initially
  if ($node->type == 'cis_course' && empty($node->nid) && module_exists('cis_section')) {
    $section = new stdClass();
    $section->type = 'section';
    $section->title = t('@title master section', array('@title' => $node->title));
    // set the local uuid linked field value to that we get from the remote
    $section->field_section_id[LANGUAGE_NONE][0]['value'] = 'master_' . $node->field_course_machine_name[LANGUAGE_NONE][0]['value'];
    $section->language = LANGUAGE_NONE;
    $section->is_new = TRUE;
    node_object_prepare($section);
    // build out via submit then save
    if($section = node_submit($section)) {
      // force these to be saved by user 1 just so they have some user affiliation
      $section->uid = 1;
      node_save($section);
    }
    // write course to associate this section if needed
    $node->field_course_sections_ref['und'][] = array('target_id' => $section->nid);
  }
}

/**
 * Implements hook_node_insert().
 */
function cis_course_authority_node_insert($node) {
  // stupid but we have to create the association in two steps
  if ($node->type == 'cis_course' && module_exists('cis_section')) {
    // ensure that the section reference is set in reverse
    foreach ($node->field_course_sections_ref['und'] as $s) {
      $section = node_load($s['target_id']);
      $section->field_section_course_ref['und'][0]['target_id'] = $node->nid;
      node_save($section);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function cis_course_authority_node_update($node) {
  // see if title has changed, if so let's mirror this
  if ($node->type == 'cis_course' && isset($node->original) && $node->original->title != $node->title) {
    // reflect this change everywhere
    $properties = array(
      'title' => $node->title,
    );
    _elmsln_api_course_sync($properties, '1', TRUE);
  }
}

/**
 * Implements hook_elmsln_api_info().
 */
function cis_course_authority_elmsln_api_info() {
  // populate a course network
  $callbacks['sync_data_model'] = array(
    'methods' => array('POST'),
    'bootstrap' => DRUPAL_BOOTSTRAP_FULL,
    'file' => 'callbacks/v1/sync_data_model.inc',
  );

  return $callbacks;
}
