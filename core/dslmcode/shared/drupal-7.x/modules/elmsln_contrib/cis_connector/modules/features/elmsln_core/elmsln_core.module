<?php
/**
 * @file
 * Code for the ELMSLN Core feature.
 */

include_once 'elmsln_core.features.inc';

/**
 * Implements hook_menu().
 */
function elmsln_core_menu() {
  $items['elmsln/redirect/%/%/%'] = array(
    'title' => 'view asset',
    'page callback' => '_elmsln_core_remote_redirect',
    'access arguments' => array('view cis shortcode'),
    'page arguments' => array(2, 3, 4, 'view'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['elmsln/redirect/%/%/%/view'] = array(
    'title' => 'view asset',
    'page callback' => '_elmsln_core_remote_redirect',
    'access arguments' => array('view cis shortcode'),
    'page arguments' => array(2, 3, 4, 5),
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['elmsln/redirect/%/%/%/edit'] = array(
    'title' => 'edit asset',
    'page callback' => '_elmsln_core_remote_redirect',
    'page arguments' => array(2, 3, 4, 5),
    'access arguments' => array('view cis shortcode'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  return $items;
}

/**
 * Allow for structured redirecting to other tools in the network.
 *
 * @param  string  $tool     tool to connect to in the registry
 * @param  string  $type     entity type to point to
 * @param  int     $etid     entity id
 * @param  string  $op       view, edit, delete, etc, the entity operations
 *
 * @return                   nothing returned, should redirect to remote space
 */
function _elmsln_core_remote_redirect($tool, $type, $etid, $op) {
  if ($settings = _cis_connector_build_registry($tool)) {
    $instance = '/';
    if (isset($settings['instance']) && $settings['instance']) {
      $instance = '/' . _cis_connector_course_context() . '/';
    }
    $address = _cis_connector_format_address($settings, $instance, 'front') . $type . '/' . $etid . '/' . $op;
    // allow for redirecting back to whatever was set
    if (isset($_GET['destination'])) {
      $address .= '?destination=' . $_GET['destination'];
    }
    if (isset($_GET['elmsln_course'])) {
      $address .= '&elmsln_course=' . $_GET['elmsln_course'];
    }
    // look for a CID to destroy prior to redirect, this should ensure
    // that the cached references to the item just modified are deleted
    // as the user gets there so they end up repopulating caches with
    // the data they just changed, always ensuring its fresh!
    if (isset($_GET['elmsln_cid_target'])) {
      $cid = 'elmsln:' . variable_get('install_profile', 'standard') . ':';
      $path = explode('/', $_GET['elmsln_cid_target']);
      if (count($path) > 1) {
        $cid .= $path[0] . ':' . $path[1] . ':';
      }
      // sync the service but do it non-blocking
      $request = array(
        'method' => 'POST',
        'api' => '1',
        'bucket' => $tool,
        'path' => $instance,
        'data' => array(
          'elmsln_module' => 'elmsln_api',
          'elmsln_callback' => 'clear_cache_bin',
          'bin' => 'cis_connector',
          'cid' => $cid,
        ),
      );
      $response = _elmsln_api_request($request);
    }
    // redirect over to this location
    header('Location: ' . $address, TRUE, 302);
    // drupal_goto has this, says its important incase numeric code not understood
    drupal_exit($address);
  }
  return t('This is not a valid tool in the network to create a link to.');
}

/**
 * Implements hook_drupal_goto_alter().
 */
function elmsln_core_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  // helper to propagate contextual data on redirects between systems
  if (strpos($path, 'elmsln/redirect') === 0) {
    // make sure course passes down through forms
    // it's trippy but because elmsln/redirect doesn't load up using drupal_goto
    // but is instead pointed to via one, this should ensure that we only ever
    // do our remote cid destruction when needed and in the correct direction!
    if (isset($_GET['elmsln_course'])) {
      $options['query']['elmsln_course'] = filter_xss($_GET['elmsln_course']);
    }
    $options['query']['elmsln_cid_target'] = current_path();
  }
}

/**
 * Implements hook_permission().
 */
function elmsln_core_permission() {
  return array(
    'access elmsln administration areas' =>  array(
      'title' => t('Administer ELMSLN configuration'),
      'description' => t('Grants access to administrative areas of ELMSLN like network configuration and settings pages.'),
    ),
  );
}

/**
 * Implements hook_node_prepare().
 */
function elmsln_core_node_prepare($node) {
  if (!isset($node->nid)) {
    drupal_add_js(drupal_get_path('module', 'elmsln_core') . '/js/field-focus.js');
  }
}

/**
 * Implements hook_preprocess().
 *
 * Add a class to match our view-modes
 */
function elmsln_core_preprocess(&$variables, $hook) {
  if ($hook == 'node') {
    $variables['classes_array'][] = $hook . '-view-mode-' . $variables['view_mode'];
  }
}

/**
 * Implements hook_page_build().
 */
function elmsln_core_page_build(&$page) {
  // enable jquery cookie for all pages since we store a bunch of stuff local to the user account
  drupal_add_library('system', 'jquery.cookie');
  drupal_add_js(drupal_get_path('module', 'elmsln_core') . '/js/field-focus.js');
  // jwerty keyboard support
  drupal_add_js(drupal_get_path('module', 'elmsln_core') . '/js/elmsln-core-jwerty.js');
  // xapi context iframe sniffer
  drupal_add_js(drupal_get_path('module', 'elmsln_core') . '/js/elmsln-core-xapi-context.js', array('weight' => 1000));
  // get the configuration so we can set domain from here to enable
  // secure and policy compliant access to sub-domain cookies on
  // the client side. This clears up MULTIPLE issues at once and is
  // awesome!
  $cfg = _cis_connector_get_cfg();
  // pass variables to js
  $js_variables = array(
    'elmslnCore' => array(
      'domain' => '.' . $cfg['address'],
      'course' => _cis_connector_course_context(),
      'section' => _cis_connector_section_context(),
      'title' => drupal_get_title(),
      'url' => url(current_path(), array('absolute' => TRUE)),
    ),
  );
  drupal_add_js($js_variables, 'setting');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function elmsln_core_form_a11y_admin_settings_alter(&$form, &$form_state) {
  // inject the correct value here
  $cfg = _cis_connector_get_cfg();
  $form['a11y_domain']['#default_value'] = '.' . $cfg['address'];
}

/**
 * Implements hook_url_inbound_alter().
 *
 * Sets the active section / course for a user based on a query parameter.
 */
function elmsln_core_url_inbound_alter(&$path, $original_path, $path_language) {
  $query_params = drupal_get_query_parameters();
  $changed = FALSE;
  if (isset($query_params['elmsln_active_section']) && $section_id = $query_params['elmsln_active_section']) {
    // get a list of allowed sections for this user
    $sections = array();
    // select field section data
    $query = new EntityFieldQuery();
    // pull all nodes
    $query->entityCondition('entity_type', 'node')
    // that are sections
    ->entityCondition('bundle', 'section')
    // that are published
    ->propertyCondition('status', 1);
    $result = $query->execute();
    // ensure we have results
    if (isset($result['node'])) {
      $nids = array_keys($result['node']);
      $results = entity_load('node', $nids);
      // convert to a readable array of options
      foreach ($results as $val) {
        $section = $val->field_section_id['und'][0]['safe_value'];
        $sections[$section] = $val->title;
      }
    }
    // check if the proposed section is in the list of allowed sections
    if (in_array($section_id, $sections) || _cis_connector_role_grouping('staff')) {
      // set the active session
      $_SESSION['cis_section_context'] = $section_id;
    }
    // Remove the active section query parameter and proceed to the url
    unset($query_params['elmsln_active_section']);
    $changed = TRUE;
  }
  // course
  if (isset($query_params['elmsln_active_course']) && $course = $query_params['elmsln_active_course']) {
    $_SESSION['cis_course_context'] = $course;
    // Remove the active section query parameter and proceed to the url
    //unset($query_params['elmsln_active_course']);
    //$changed = TRUE;
  }
  // look or cross-network masquerade
  if (isset($query_params['elmsln_masquerade']) && $masquerad = $query_params['elmsln_masquerade']) {
    // Remove masquerade item
    unset($query_params['elmsln_masquerade']);
    $changed = TRUE;
  }
  // ensure we skimmed something off before redirect looping!
  if ($changed) {
    drupal_goto($path, array('query' => $query_params));
  }
}

/**
 * Implements hook_url_outbound_alter().
 *
 * Appends section context query parameter to
 * all outbound links going to other ELMSLN subdomains.
 */
function elmsln_core_url_outbound_alter(&$path, &$options, $original_path) {
  // do an easy inital check to see if it's going to an external site
  // internal links shouldn't have a protocol
  if (strpos($path, '://')) {
    global $base_url;
    $current_domain = _cis_connector_url_get_properties($base_url);
    // verify the current domain is in the outgoing domain
    if (strpos($original_path, $current_domain['domain'])) {
      $outgoing_domain = _cis_connector_url_get_properties($original_path);
      // verify that the link is going to a separate subdomain
      if ($current_domain['subdomain'] != 'online' && $current_domain['subdomain'] != $outgoing_domain['subdomain']) {
        // keep section context
        $current_section = _cis_connector_section_context();
        if (isset($current_section) && $current_section) {
          // append the section context query parameter to the outgoing url
          $options['query']['elmsln_active_section'] = $current_section;
        }
        // keep course context
        $current_course = _cis_connector_course_context();
        if (isset($current_course) && $current_course) {
          // append the section context query parameter to the outgoing url
          $options['query']['elmsln_active_course'] = $current_course;
        }
        // keep masquerade context
        if (isset($_SESSION['masquerading'])) {
          $options['query']['elmsln_masquerade'] = $GLOBALS['user']->name;
        }
      }
    }
  }
}

/**
 * Return a list of available icon libraries that other modules have defined.
 * @return [type] [description]
 */
function _elmsln_core_icon_libraries() {
  $icon_libraries = module_invoke_all('icon_library');
  drupal_alter('icon_library', $icon_libraries);
  return $icon_libraries;
}

/**
 * Implements hook_icon_library().
 */
function elmsln_core_icon_library() {
  return array(
    'foundation_access' => array(
      'title' => t('Foundation access'),
    ),
    'material' => array(
      'title' => t('Material'),
    ),
  );
}

/**
 * Implements hook_fa_a11y().
 * Provides keyboard shortcut buttons
 */
function elmsln_core_fa_a11y() {
  return array(3 => '<div class="keyboard-short">
    <div class="keyboard-short__group">
      <label>' . t('Scroll down') . '</label>
      <div class="keyboard-short__key">↓</div>
      <div class="keyboard-short__key">↓</div>
    </div>
    <div class="keyboard-short__group">
      <label>' . t('Scroll back to top') . '</label>
      <div class="keyboard-short__key">↑</div>
      <div class="keyboard-short__key">↑</div>
    </div>
    <div class="keyboard-short__group">
      <label>' . t('Open add tab') . '</label>
      <div class="keyboard-short__key">Alt</div>
      <div class="keyboard-short__key">Shift</div>
      <div class="keyboard-short__key">d</div>
    </div>
    <div class="keyboard-short__group">
      <label>' . t('Open network tab') . '</label>
      <div class="keyboard-short__key">Alt</div>
      <div class="keyboard-short__key">Shift</div>
      <div class="keyboard-short__key">n</div>
    </div>
    <div class="keyboard-short__group">
      <label>' . t('Open user tab') . '</label>
      <div class="keyboard-short__key">Alt</div>
      <div class="keyboard-short__key">Shift</div>
      <div class="keyboard-short__key">u</div>
    </div>
    <div class="keyboard-short__group">
      <label>' . t('Open accessibility tab') . '</label>
      <div class="keyboard-short__key">Alt</div>
      <div class="keyboard-short__key">Shift</div>
      <div class="keyboard-short__key">a</div>
    </div>
    <div class="keyboard-short__group">
      <label>' . t('Open share tab') . '</label>
      <div class="keyboard-short__key">Alt</div>
      <div class="keyboard-short__key">Shift</div>
      <div class="keyboard-short__key">s</div>
    </div>
    <div class="keyboard-short__group">
      <label>' . t('Edit page') . '</label>
      <div class="keyboard-short__key">Alt</div>
      <div class="keyboard-short__key">Shift</div>
      <div class="keyboard-short__key">e</div>
    </div>
    <div class="keyboard-short__group">
      <label>' . t('Open more options menu') . '</label>
      <div class="keyboard-short__key">Alt</div>
      <div class="keyboard-short__key">Shift</div>
      <div class="keyboard-short__key">m</div>
    </div>
  </div>');
}

/**
 * Implements hook_voice_command().
 */
function elmsln_core_voice_command() {
  // see what we have in the registry
  $registry = _cis_connector_build_registry();
  foreach ($registry as $distro => $settings) {
    // only allow shouting commands admin links if an admin
    if (isset($settings['instance']) && (($settings['instance'] && user_access('view lmsless links')) || (!$settings['instance'] && user_access('view lmsless administration links')))) {
      $instance = '/' . _cis_connector_course_context();
      $address = _cis_connector_format_address($settings, $instance, 'front');
      // support for things that we know commonly would make no sense still
      // for the alternate command phrase
      switch ($distro) {
        case 'lq':
          $distro = t('live question');
        break;
        case 'editorial':
          $distro = t('journal');
        break;
        case 'ecd':
          $distro = t('compliance');
        break;
        case 'mooc':
          $distro = t('(course) content (outline)');
        break;
        case 'eph':
          $distro = t('program hub');
        break;
        case 'assessment':
          $distro = t('testing');
          $commands["%phrase go to (the) grading (system)(tool)"] =  array(
            'callback' => 'Drupal.voicecommander.goToELMSLN',
            'data' => $address,
          );
          $commands["%phrase go to (the) gradebook (system)(tool)"] =  array(
            'callback' => 'Drupal.voicecommander.goToELMSLN',
            'data' => $address,
          );
        break;
        case 'cle':
          $distro = t('open studio');
          $commands["%phrase go to (the) assignment studio (system)(tool)"] =  array(
            'callback' => 'Drupal.voicecommander.goToELMSLN',
            'data' => $address,
          );
        break;
        case 'discuss':
          $distro = t('discussion boards');
          $commands["%phrase go to (the) forum (system)(tool)"] =  array(
            'callback' => 'Drupal.voicecommander.goToELMSLN',
            'data' => $address,
          );
        break;
      }
      // make a shortcut to go to that part of the course experience
      $commands["%phrase go to (the) $distro (system)(tool)"] =  array(
        'callback' => 'Drupal.voicecommander.goToELMSLN',
        'data' => $address,
      );
      // pull off the first part of the address for an alternate call
      $tmp = explode('.', $settings['address']);
      $alternate = array_shift($tmp);
      $commands["%phrase go to (the) $alternate (system)(tool)"] =  array(
        'callback' => 'Drupal.voicecommander.goToELMSLN',
        'data' => $address,
      );
    }
  }
  $commands["%phrase play (video)"] =  array(
    'callback' => 'Drupal.voicecommanderControlVideo',
  );
  $commands["%phrase pause (video)"] =  array(
    'callback' => 'Drupal.voicecommanderControlVideo',
  );
  return array(
    'elmsln_core' => array('commands' => $commands)
  );
}