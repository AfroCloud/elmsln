<?php
/**
 * @file Web components token processing callback
 */

/**
 * Implements hook_permission().
 */
function webcomponents_token_permission() {
  return array(
    'use webcomponents token' =>  array(
      'title' => t('Web components token'),
      'description' => t('Allow for rendering tokens via callback.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function webcomponents_token_menu() {
  $items = array();
  $items['webcomponents/drupal-token/%/%'] = array(
    'title' => 'Web components drupal token render',
    'page callback' => '_webcomponents_token_render',
    'page arguments' => array(2, 3),
    'access arguments' => array('use webcomponents token'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Render a token remotely
 */
function _webcomponents_token_render($security_token, $format) {
  // get text from the request body
  $return = array(
    'status' => 403,
    'content' => '',
  );
  drupal_add_http_header('Content-Type', 'application/json');
  // define status
  drupal_add_http_header('Status', 200);
  // validate the token
  if (drupal_valid_token($security_token, 'webcomponents_token')) {
    $params = filter_var_array($_GET, FILTER_SANITIZE_STRING);
    $token = $params['token'];
    // set global to skip our drupal token processor!
    $GLOBALS['skip_drupal_token'] = TRUE;
    // replace the content
    // @todo... why oh why won't you process
    $content = check_markup($token, $format);
    $return = array(
      'status' => 200,
      'content' => $content,
      'token' => $token,
      'format' => $format,
    );
  }
  // output the response as json
  print drupal_json_output($return);
  exit;
}

/**
 * Implements hook_filter_info().
 */
function webcomponents_token_filter_info() {
  $filters = array();
  $filters['webcomponents_token'] = array(
    'title' => t('Webcomponents filter'),
    'description' => t('Fake substitute for the drupal-token tag'),
    'process callback' => '_webcomponents_token_process',
    'tips callback' => '_webcomponents_token_tips',
    'weight' => -100,
  );
  return $filters;
}

/**
 * Helper function to provide on screen tips for using the filter
 */
function _webcomponents_token_tips($filter, $format, $long = FALSE) {
  return t('This filter will ensure that drupal-token gets injected correctly');
}

/**
 * Callback function to perform the content processing.
 */
function _webcomponents_token_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  // see if we need to skip
  if (!isset($GLOBALS['skip_drupal_token']) && user_access('use webcomponents token')) {
    // statically cache future calls
    $evaluatedtext = &drupal_static(hash('md5', $text . $filter->format));
    if (empty($evaluatedtext)) {
      // match anything that seems like it's a token with no white space
      // @todo make sure this doesn't match other things
      $regex = '/\[\S*\]/';
      if (preg_match_all($regex, $text, $matches)) {
        $patterns = array();
        $media = array();
        // Have to process multiple matches since more than one player can be on a node.
        foreach ($matches[0] as $key => $match) {
          $tmptoken = str_replace(']', '', str_replace('[', '', $match));
          $patterns[] = $regex;
          $media[] = '<drupal-token token="' . $tmptoken . '" token-end-point="' . base_path() . 'webcomponents/drupal-token/' . drupal_get_token('webcomponents_token') . '/' . $filter->format . '"></drupal-token>';
        }
        $text = preg_replace($patterns, $media, $text, 1);
      }
      $evaluatedtext = $text;
    }
    return $evaluatedtext;
  }
  else {
    return $text;
  }
}
