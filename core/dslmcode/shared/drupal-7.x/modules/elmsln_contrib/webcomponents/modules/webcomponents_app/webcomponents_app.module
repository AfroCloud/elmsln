<?php
/**
 * @file
 * Code for the wiring up one page apps to Drupal.
 */

define('WEBCOMPONENTS_APP_PATH', 'apps');

/**
 * Load all apps we can find or a specific one if requested.
 * @param  string $machine_name optional name of an element to load
 * the registry for from it's manifest.json file (most likely)
 * @return array                the definition or definitions of all found as array
 */
function webcomponents_app_load_app_definitions($machine_name = NULL) {
  // statically cache future calls
  $apps = &drupal_static(__FUNCTION__);
  if (!isset($apps)) {
    // load up the definitions of apps out there
    $apps = module_invoke_all('register_webcomponent_apps');
    drupal_alter('register_webcomponent_apps', $apps);
  }
  if (!is_null($machine_name)) {
    // validate that this bucket exists
    if (isset($apps[$machine_name])) {
      // check for autoloading flag
      if (isset($apps[$machine_name]['data']) && isset($apps[$machine_name]['data']['autoload']) && $apps[$machine_name]['data']['autoload'] === TRUE) {
        include_once $apps[$machine_name]['path'] . $machine_name . '.php';
      }
      return $apps[$machine_name];
    }
    // nothing at this point, return nothing since we don't know that machine name
    return array();
  }
  // validate apps were found
  if (!empty($apps)) {
    return $apps;
  }
  // nothing at this point, return nothing
  return array();
}

/**
 * Implements hook_permission().
 */
function webcomponents_app_permission() {
  $perms = array(
    'access all webcomponent apps' =>  array(
      'title' => t('Access all webcomponent apps'),
      'description' => t('This enables the user to see all apps without checking per app access.'),
    ),
  );
  // load app definitions
  $apps = webcomponents_app_load_app_definitions();
  foreach ($apps as $machine_name => $app) {
    $perms['access ' . $machine_name . ' app'] = array(
      'title' => t('Access @name', array('@name' => $app['title'])),
      'description' => t('Allow user to access the one page app called @name', array('@name' => $app['title'])),
    );
  }
  return $perms;
}

/**
 * Implements hook_menu().
 */
function webcomponents_app_menu() {
  $items = array();
  // load app definitions
  $apps = webcomponents_app_load_app_definitions();
  foreach ($apps as $machine_name => $app) {
    $items[WEBCOMPONENTS_APP_PATH . '/' . $machine_name] = array(
      'title' => $app['title'],
      'page callback' => '_webcomponents_app_load_app',
      'page arguments' => array(1),
      'access callback' => '_webcomponents_app_access',
      'access arguments' => array(1),
      'type' => MENU_CALLBACK,
    );
    if (module_exists('devel')) {
      $items[WEBCOMPONENTS_APP_PATH . '/' . $machine_name . '/devel'] = array(
        'title' => $app['title'],
        'page callback' => '_webcomponents_app_debug',
        'page arguments' => array(1),
        'access callback' => '_webcomponents_app_access',
        'access arguments' => array(1),
        'type' => MENU_CALLBACK,
      );
    }
    // optional support for adding into the menu system beyond callback
    if (isset($app['menu'])) {
      // if we are making this a menu then make it normal so it shows up in lists
      $items[WEBCOMPONENTS_APP_PATH . '/' . $machine_name]['type'] = MENU_NORMAL_ITEM;
      $items[WEBCOMPONENTS_APP_PATH . '/' . $machine_name]['menu_name'] = $app['menu']['menu_name'];
      $items[WEBCOMPONENTS_APP_PATH . '/' . $machine_name]['weight'] = $app['menu']['weight'];
    }
    // add in the data wiring if it needs it, most will
    if (isset($app['data'])) {
      $items[WEBCOMPONENTS_APP_PATH . '/' . $machine_name . '/data'] = array(
        'title' => $app['title'],
        'page callback' => '_webcomponents_app_load_app_data',
        'page arguments' => array(1),
        'access callback' => '_webcomponents_app_access',
        'access arguments' => array(1),
        'type' => MENU_CALLBACK,
      );
    }
  }

  return $items;
}


/**
 * Implements hook_block_info().
 */
function webcomponents_app_block_info() {
  $blocks = array();
  // load all apps
  $apps = webcomponents_app_load_app_definitions();
  // make blocks for each app and ensure the cache is global
  // since these are just printing the tag into them they shouldn't change
  foreach ($apps as $machine_name => $app) {
    // support block per element if the registry says to
    if (isset($app['block']) && $app['block'] == TRUE) {
      $blocks[$machine_name] = array(
        'info' => t('Web Component app: @title', array('@title' => $app['title'])),
        'cache' => DRUPAL_CACHE_GLOBAL
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function webcomponents_app_block_view($machine_name = '') {
  $block = array();
  // try to load the machine name (delta in block lingo)
  $app = webcomponents_app_load_app_definitions($machine_name);
  if (!empty($app) && isset($app['block']) && $app['block'] == TRUE) {
    $block['subject'] = $app['title'];
    $block['content'] = _webcomponents_app_load_app($machine_name);
  }
  return $block;
}

/**
 * Callback for apps/%/devel to view what's going on.
 */
function _webcomponents_app_debug($machine_name) {
  $app = webcomponents_app_load_app_definitions($machine_name);
  dpm($app);
  // side-load the data and present it
  $data = _webcomponents_app_load_app_data($machine_name, TRUE);
  dpm($data);
  return t('@machine debug and data', array('@machine' => $machine_name));
}

/**
 * Access callback for apps.
 */
function _webcomponents_app_access($machine_name) {
  // check for the access all permission which trumps specific app access
  if (user_access('access all webcomponent apps') || user_access('access ' . $machine_name . ' app')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Page callback for loading an app
 */
function _webcomponents_app_load_app($machine_name = NULL) {
  $return = '';
  $app = webcomponents_app_load_app_definitions($machine_name);
  // ensure this exists
  if (!empty($machine_name) && !empty($app)) {
    // form the base path for loading the app
    $path = base_path() . $app['path'];
    $element = array(
      '#tag' => 'link',
      '#attributes' => array(
        'href' => $path . 'manifest.json',
        'rel' => 'manifest',
      ),
    );
    drupal_add_html_head($element, 'app-' . $machine_name . '-manifest');
    $element = array(
      '#tag' => 'link',
      '#attributes' => array(
        'href' => $path . 'src/' . $machine_name . '/' . $machine_name . '.html',
        'rel' => 'import',
      ),
      '#weight' => '99999',
    );
    drupal_add_html_head($element, 'app-' . $machine_name);
    // see if we have a data path, if so we need to pass in source-path to the element
    if (isset($app['data']) && function_exists($app['data']['callback'])) {
      $vars = array(
        'tag' => $machine_name,
        'properties' => array(
          $app['data']['property'] => base_path() . WEBCOMPONENTS_APP_PATH . '/' . $machine_name . '/data?token=' . drupal_get_token('webcomponentapp'),
        ),
      );
      $return = theme('webcomponent', $vars);
    }
    elseif (isset($app['data']) && !function_exists($app['data']['callback'])) {
      drupal_set_message(t('The @machine app wants to hit the callback @callback but this function could not be found', array('@machine' => $machine_name, '@callback' => $app['data']['callback'])), 'error');
    }
    else {
      $vars = array(
        'tag' => $machine_name,
        'properties' => array(),
      );
      $return = theme('webcomponent', $vars);
    }
  }
  return $return;
}

/**
 * Data callback processor.
 */
function _webcomponents_app_load_app_data($machine_name = NULL, $debug = FALSE) {
  $return = array();
  // validate CSRF token
  if ($debug || drupal_valid_token($_GET['token'], 'webcomponentapp')) {
    $app = webcomponents_app_load_app_definitions($machine_name);
    // make sure the machine name and the data callback both exist
    if (!empty($machine_name) && !empty($app) && isset($app['data']) && function_exists($app['data']['callback'])) {
      $return = call_user_func($app['data']['callback'], $machine_name, WEBCOMPONENTS_APP_PATH . '/' . $machine_name);
    }
    else {
      $return = array(
        'status' => '404',
        'detail' => t('Not a valid callback'),
      );
    }
  }
  else {
    $return = array(
      'status' => '403',
      'detail' => t('Invalid CSRF token'),
    );
  }
  // nothing set so make it 200 even though it already is
  if (empty($return['status'])) {
    $return['status'] = '200';
  }
  // ensure there's some form of detail even if empty
  if (empty($return['detail'])) {
    $return['detail'] = '';
  }
  // ensure there's some form of detail even if empty
  if (empty($return['environment'])) {
    $return['environment'] = array();
  }
  // allow output delivery to be modified contextually
  drupal_alter('webcomponents_app_deliver_output', $return);
  // support for debugging the call in which we send the data back for processing
  if (!$debug) {
    // define return type
    drupal_add_http_header('Content-Type', 'application/json');
    // define status
    drupal_add_http_header('Status', $return['status']);
    // output the response as json
    print drupal_json_output($return);
    // official drupal exit routines
    exit;
  }
  else {
    return $return;
  }
}