diff --git a/h5p.module b/h5p.module
index bac13ff..e5f8752 100644
--- a/h5p.module
+++ b/h5p.module
@@ -28,7 +28,7 @@ function h5p_menu() {
     'description' => 'List, delete and get detailed info on the installed H5P libraries',
     'page callback' => 'h5p_library_list',
     'access arguments' => array('administer site configuration'),
-    'type' => MENU_LOCAL_TASK, 
+    'type' => MENU_LOCAL_TASK,
     'file' => 'h5p.admin.inc',
   );
   $items['admin/content/h5p/libraries/%'] = array(
@@ -43,7 +43,7 @@ function h5p_menu() {
     'file' => 'h5p.admin.inc',
   );
   $items['admin/content/h5p/libraries/%/delete'] = array(
-    'title' => 'Delete H5P Library',      
+    'title' => 'Delete H5P Library',
     'description' => 'Delete an unused H5P library',
     'page callback' => 'h5p_library_delete',
     'page arguments' => array(4),
@@ -59,7 +59,7 @@ function h5p_menu() {
     'access arguments' => array('view', 2),
     'type' => MENU_CALLBACK,
   );
-  
+
   // TODO: Should we stick to url conventions? http://moz.com/blog/11-best-practices-for-urls
   // If we want to hint on return type we should call this //h5p/set-finished.json
   $items['h5p-ajax/setFinished'] = array(
@@ -96,31 +96,31 @@ function _h5p_make_urls_absolute($urls, $remove = array()) {
 /**
  * Embed data.
  *
- * Caching this in DB probably won't have much to say? Since the 
+ * Caching this in DB probably won't have much to say? Since the
  * node needs to be loaded first. Varnish or other page cache
  * will work much better.
  *
- * Embed code example: 
+ * Embed code example:
  * <script src="//127.0.0.1/sites/all/modules/h5p/library/js/h5p-embed.js" data-h5p="//127.0.0.1/h5p/embed/1" async></script>
  */
 function h5p_embed($node) {
   global $base_url;
   $callback = filter_input(INPUT_GET, 'callback');
-  
+
   if ($callback === NULL) {
     drupal_not_found();
     module_invoke_all('exit');
     exit();
   }
-  
+
   $id = h5p_get_content_id($node);
   $settings = array();
   h5p_add_iframe_assets($settings, $id, _h5p_get_instance('core')->loadContentDependencies($id, 'preloaded'), 'h5p-' . $node->nid . '-' . $node->vid);
-  
+
   if (variable_get('h5p_export', 1)) {
     $h5p_path = $base_url . '/' . _h5p_get_instance('export')->getExportPath($id, $node->title, $node->language);
   }
-  
+
   $content = array(
     'id' => intval($id),
     'path' => $base_url . '/' . _h5p_get_h5p_path() . '/',
@@ -153,13 +153,13 @@ function h5p_embed($node) {
       ),
     ),
   );
-  
+
   print $callback . '(' . json_encode($content) . ');';
 }
 
 /**
  * Generate embed code for a given node
- * 
+ *
  * @param integer $nid
  * @return string
  */
@@ -168,13 +168,13 @@ function _h5p_generate_embed_code($nid) {
   $module_path = drupal_get_path('module', 'h5p');
   $embed_js_url = $base_url . '/' . $module_path . '/library/js/h5p-embed.js';
   $data_url = url('h5p/embed/' . $nid, array('absolute' => TRUE));
-  
+
   return '<script src="' . $embed_js_url .'" data-h5p="' . $data_url . '" async></script>';
 }
 
 /**
- * Creates the title for the library details page 
- * 
+ * Creates the title for the library details page
+ *
  * @param integer $library_id
  */
 function _h5p_library_details_title($library_id) {
@@ -300,7 +300,7 @@ function h5p_insert($node) {
   if (isset($_SESSION['h5p_upload'])) {
     $h5p_core = _h5p_get_instance('storage');
     $h5p_core->savePackage(h5p_get_content_id($node), $node->nid);
-    
+
     _h5p_clear_js_and_css_cache();
   }
   else {
@@ -338,7 +338,7 @@ function h5p_update($node) {
   else {
     // Make sure a row exists before we try updating it.
     $content_id = db_query("SELECT content_id FROM {h5p_nodes} WHERE content_id = :content_id", array(':content_id' => $content_id))->fetchField();
-    
+
     if ($content_id !== FALSE) {
       db_update('h5p_nodes')
         ->fields(array(
@@ -353,7 +353,7 @@ function h5p_update($node) {
       // No rows, insert new row. (this happens if the module is reinstalled)
       h5p_insert($node);
     }
-    
+
     _h5p_clear_js_and_css_cache();
   }
 
@@ -382,7 +382,7 @@ function h5p_delete($node) {
  */
 function h5p_load($nodes) {
   $h5p = _h5p_get_instance('core');
-  foreach ($nodes as $nid => &$node) {  
+  foreach ($nodes as $nid => &$node) {
     $content = $h5p->loadContent(h5p_get_content_id($node));
 
     if ($content !== NULL) {
@@ -399,34 +399,32 @@ function h5p_load($nodes) {
  */
 function h5p_view($node, $view_mode = 'full') {
   node_object_prepare($node);
-  if ($view_mode === 'full') {
-    if (!isset($node->in_preview) && isset($node->main_library_id)) {
-      $content_id = h5p_get_content_id($node);
-      $embed = H5PCore::determineEmbedType($node->embed_type, $node->main_library['embedTypes']);
-      
-      h5p_add_files_and_settings($node, $embed);
-      // TODO: Should we use Drupal's theme system?
-      if ($embed === 'div') {
-        $html = '<div class="h5p-content" data-content-id="' .  $content_id . '"></div>';
-      }
-      else {
-        $html = '<div class="h5p-iframe-wrapper"><iframe id="h5p-iframe-' . $content_id . '" class="h5p-iframe" data-content-id="' . $content_id . '" style="width: 100%; height: 1px; border: none; display: block;" src="about:blank" frameBorder="0"></iframe></div>';
-      }
-    }
-    
-    if (!isset($html)) {
-      $html = '<div>' . t('Sorry, preview of H5P content is not yet available.') . '</div>';
+  if (!isset($node->in_preview) && isset($node->main_library_id)) {
+    $content_id = h5p_get_content_id($node);
+    $embed = H5PCore::determineEmbedType($node->embed_type, $node->main_library['embedTypes']);
+
+    h5p_add_files_and_settings($node, $embed);
+    // TODO: Should we use Drupal's theme system?
+    if ($embed === 'div') {
+      $html = '<div class="h5p-content" data-content-id="' .  $content_id . '"></div>';
     }
     else {
-      h5p_set_started(h5p_get_content_id($node));
+      $html = '<div class="h5p-iframe-wrapper"><iframe id="h5p-iframe-' . $content_id . '" class="h5p-iframe" data-content-id="' . $content_id . '" style="width: 100%; height: 1px; border: none; display: block;" src="about:blank" frameBorder="0"></iframe></div>';
     }
+  }
 
-    $node->content['h5p'] = array(
-      '#markup' => $html,
-      '#weight' => 1,
-    );
+  if (!isset($html)) {
+    $html = '<div>' . t('Sorry, preview of H5P content is not yet available.') . '</div>';
+  }
+  else {
+    h5p_set_started(h5p_get_content_id($node));
   }
 
+  $node->content['h5p'] = array(
+    '#markup' => $html,
+    '#weight' => 1,
+  );
+
   return $node;
 }
 
@@ -515,13 +513,13 @@ function h5p_add_core_assets() {
       'css' => array(),
       'js' => array()
     );
-    
+
     foreach (H5PCore::$styles as $style) {
       $css = $module_path . '/library/' . $style;
       drupal_add_css($css);
-      $assets['css'][] = $css; 
+      $assets['css'][] = $css;
     }
-    
+
     $js = $module_path . '/js/h5pintegration.js';
     drupal_add_js($js);
     $assets['js'][] = $js;
@@ -530,7 +528,7 @@ function h5p_add_core_assets() {
       drupal_add_js($js);
       $assets['js'][] = $js;
     }
-    
+
     drupal_add_js(array(
       'h5p' => array(
         'contentPath' => base_path() . _h5p_get_h5p_path() . '/content/',
@@ -543,7 +541,7 @@ function h5p_add_core_assets() {
       )
     ), 'setting');
   }
-    
+
   return $assets;
 }
 
@@ -554,19 +552,19 @@ function h5p_add_core_assets() {
  */
 function h5p_add_files_and_settings($node, $embed_type) {
   static $added_content, $added_js, $added_css;
-  
+
   h5p_add_core_assets();
-  
+
   if (!isset($node->json_content) || !isset($node->nid)) {
     return; // Not content.
   }
-  
+
   $content_id = h5p_get_content_id($node);
   if (isset($added_content[$content_id])) {
     return; // Already added.
   }
   $added_content[$content_id] = TRUE;
-    
+
   $h5p_params = h5p_filter_json_content($node);
   if ($h5p_params === NULL) {
     return; // Failure in validation.
@@ -589,7 +587,7 @@ function h5p_add_files_and_settings($node, $embed_type) {
       )
     )
   );
-  
+
   $files = _h5p_get_instance('core')->loadContentDependencies($content_id, 'preloaded');
   if ($embed_type === 'div') {
     foreach ($files['scripts'] as $js_path) {
@@ -618,18 +616,18 @@ function h5p_add_files_and_settings($node, $embed_type) {
 /**
  * Add the necessary assets for content to run in an iframe.
  *
- * @param array $settings 
+ * @param array $settings
  * @param int $content_id
  * @param array $files
  * @param string $cache_file_prefix
  */
 function h5p_add_iframe_assets(&$settings, $content_id, $files) {
   static $core_added;
-  
+
   if ($core_added === NULL) {
     $core_added = TRUE;
     $core_assets = h5p_add_core_assets();
-  
+
     $settings['h5p']['core']['scripts'] = $core_assets['js'];
     $settings['h5p']['core']['styles'] = $core_assets['css'];
   }
@@ -638,9 +636,9 @@ function h5p_add_iframe_assets(&$settings, $content_id, $files) {
   $preprocess_js = (variable_get('preprocess_js', FALSE) && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update'));
   $directory = file_stream_wrapper_get_instance_by_uri('public://')->realpath();
   $is_writable = is_dir($directory) && is_writable($directory);
-  // TODO: && (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PUBLIC); ? 
+  // TODO: && (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PUBLIC); ?
 
-  // Aggregate library styles and scripts for faster loading when using iframe. 
+  // Aggregate library styles and scripts for faster loading when using iframe.
   // Core files are not included to leverage browser caching! See http://css-tricks.com/one-two-three
 
   if ($is_writable && $preprocess_css) {
@@ -652,14 +650,14 @@ function h5p_add_iframe_assets(&$settings, $content_id, $files) {
         'type' => 'file'
       );
     }
-    
+
     $css_url = file_create_url(drupal_build_css_cache($styles));
     $settings['h5p']['cid-' . $content_id]['styles'] = array($css_url);
   }
   else {
     $settings['h5p']['cid-' . $content_id]['styles'] = $files['styles'];
   }
-  
+
   if ($is_writable && $preprocess_js) {
     // Refactor scripts array to Drupal eatable format.
     $scripts = array();
@@ -670,7 +668,7 @@ function h5p_add_iframe_assets(&$settings, $content_id, $files) {
         'preprocess' => TRUE,
       );
     }
-    
+
     $js_url = file_create_url(drupal_build_js_cache($scripts));
     $settings['h5p']['cid-' . $content_id]['scripts'] = array($js_url);
   }
@@ -695,7 +693,7 @@ function h5p_filter_json_content($node) {
       return $cache->data;
     }
   }
-  
+
   // Get semantics.
   $semantics = _h5p_get_instance('core')->loadLibrarySemantics($node->main_library['name'], $node->main_library['majorVersion'], $node->main_library['minorVersion']);
 
@@ -705,7 +703,7 @@ function h5p_filter_json_content($node) {
   else {
     // Get params as object
     $params = json_decode($node->json_content);
-    
+
     $validator = _h5p_get_instance('contentvalidator');
     // Validate and filter against main library semantics.
     $validator->validateBySemantics($params, $semantics);
@@ -717,20 +715,20 @@ function h5p_filter_json_content($node) {
     // Cache results
     cache_set($cid, $params);
   }
-  
+
   return $params;
 }
 
 /**
  * Verify that the libraries H5P needs exists
- * 
+ *
  * @return boolean
  *  TRUE if the settings validate, FALSE otherwise
  */
 function _h5p_check_settings() {
   $file_path = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath();
   $path = $file_path . '/' . variable_get('h5p_default_path', 'h5p');
-  
+
   // Creating directories - the first empty string is for creating the parent H5P directory
   foreach (array('', 'temp', 'libraries', 'content', 'exports', 'development') as $directory) {
     $directory = $path . '/' . $directory;
@@ -738,7 +736,7 @@ function _h5p_check_settings() {
       return FALSE;
     }
   }
-  
+
   return TRUE;
 }
 
@@ -784,16 +782,16 @@ function _h5p_get_instance($type) {
     if (variable_get('h5p_library_development', 0) === 1) {
       $development_mode |= H5PDevelopment::MODE_LIBRARY;
       $preprocess_css_or_js = variable_get('preprocess_css', 0) === '1' || variable_get('preprocess_js', 0) === '1';
-      
+
       $message = t('H5P library development directory is enabled. Change <a href="@settings-page">settings</a>.', array('@settings-page' => url('admin/settings/h5p')));
-      
+
       if ($preprocess_css_or_js) {
         $message .= '<br/>' . t('Preprocessing of css and/or js files is enabled. This is not supported when using the development directory option. Please disable preprocessing, and clear the cache');
       }
-      
+
       drupal_set_message($message, 'warning', FALSE);
     }
-    
+
     $core = new H5PCore($interface, _h5p_get_h5p_path(), $language->language, $development_mode);
   }
 
@@ -876,7 +874,7 @@ function h5p_field_extra_fields() {
       )
     )
   );
-  
+
   return $extra;
 }
 
@@ -885,22 +883,22 @@ function h5p_field_extra_fields() {
  * TODO
  */
 function h5p_library_delete_form(&$form_state, $library_id, $library_name) {
-  
+
   $form['library_id'] = array(
       '#type' => 'hidden',
       '#value' => $library_id
   );
-  
+
   $form['info'] = array(
     '#type' => 'markup',
     '#value' => '<span>' . t('Are you sure you would like to delete the @library_name H5P library?', array('@library_name' => $library_name)) . '</span>'
   );
-  
+
   $form['submit'] = array(
     '#type' => 'submit',
     '#value' => t('Delete')
   );
-  
+
   return $form;
 }
 
