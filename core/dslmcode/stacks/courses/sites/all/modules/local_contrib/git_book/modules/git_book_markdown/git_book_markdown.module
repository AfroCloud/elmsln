<?php
/**
 * @file
 * Slight modifications to our markdown editor integration.
 */


/**
 * Implements hook_wysiwyg_editor_settings_alter().
 * Support for WYSIWYG editor epiceditor
 */
function git_book_markdown_wysiwyg_editor_settings_alter(&$settings, $context) {
  if ($context['editor']['name'] == 'epiceditor') {
    $settings['theme'] = 'epic-light';
    $settings['preview_theme'] = 'github';
    $settings['useNativeFullscreen'] = FALSE;
  }
}

/**
 * Implements hook_git_book_make_node_alter().
 */
function git_book_markdown_git_book_make_node_alter(&$node) {
  $node->body[LANGUAGE_NONE][0]['format'] = 'git_book_markdown';
}

/**
 * Implements hook_node_prepare().
 */
function git_book_markdown_node_prepare($node) {
  if (isset($node->book) && (arg(1) == 'add' || empty($node->body))) {
    $book = node_load($node->book['bid']);
    if ($book && $book->type == 'git_book') {
      // hijack default input format to be markdown
      $node->body[LANGUAGE_NONE][0]['format'] = 'git_book_markdown';
    }
  }
}

/**
 * Implements hook_filter_info_alter().
 */
function git_book_markdown_filter_info_alter(&$info) {
  $info['filter_markdown']['process callback'] = '_git_book_filter_markdown';
  // aggressive but then we know it actually will process our changes at run time correctly
  $info['filter_markdown']['cache'] = FALSE;
}

/**
 * Filter process callback, fork of markdown module filter after altering this in.
 * @see   _filter_markdown()
 */
function _git_book_filter_markdown($text, $format) {
  if (!empty($text)) {
    // fix h1-h5 to shift down the document order
    $text = preg_replace('{
      ^(\#{1,5})  # $1 = string of #\'s
      [ ]*
      (.+?)   # $2 = Header text
      [ ]*
      \#*     # optional closing #\'s (not counted)
      \n+
    }xm', '#${0}', $text);
    // do the messy replacement to append our full qualified URL
    $text = preg_replace_callback('/!\[([^\[]+)\]\(([^\)]+)\)/',
    function($matches) {
      $path = _git_book_markdown_book_root_path();
      if (substr($matches[2], 0, 1) == '/') {
        $path .= $matches[2];
      }
      else {
        $path .= '/' . _git_book_markdown_current_dir() . $matches[2];
      }
      return '![' . $matches[1] . '](' . $path . ')';
    }
    , $text);
    // hit links now to ensure internal point correctly
    $text = preg_replace_callback('/\[([^\[]+)\]\(([^\)]+).md\)/',
    function($matches) {
      $path = substr_replace(base_path(), "", -1);
      if (substr($matches[2], 0, 1) == '/') {
        $path .= $matches[2];
      }
      // reference to remove .md file
      else if (strpos($matches[2], '://') !== FALSE) {
        $path = $matches[2];
      }
      else {
        $path .= '/' . _git_book_markdown_current_dir() . $matches[2];
      }
      return '[' . $matches[1] . '](' . $path . '.md)';
    }
    , $text);
    return _filter_markdown($text, $format);
  }
  return $text;
}

/**
 * Return current book path
 * @return string path partial to current alias
 */
function _git_book_markdown_book_root_path($nid = NULL) {
  // support manual pass through
  if (empty($nid)) {
    $nid = arg(1);
  }
  // support for non node/id based pages
  drupal_alter('gbm_active_nid', $nid);
  $path = &drupal_static(__FUNCTION__);
  if (!isset($path)) {
    // find book root
    $result = db_query("SELECT * FROM {book} b INNER JOIN {menu_links} ml ON b.mlid = ml.mlid WHERE b.nid=:nid", array(':nid' =>  $nid), array('fetch' => PDO::FETCH_ASSOC));
    // load book root and build private file path relative to it
    foreach ($result as $record) {
      $bid = $record['bid'];
      $book = node_load($bid);
      $path = file_create_url('private://' . preg_replace('/[^a-z0-9]/', '', drupal_strtolower($book->title)));
    }
  }
  // allow developers to modify this before it goes out
  drupal_alter('gbm_book_root_path', $path);
  return $path;
}

/**
 * Return current directory based on current path
 * @return string path partial to current alias
 */
function _git_book_markdown_current_dir() {
  $dir = &drupal_static(__FUNCTION__);
  if (!isset($dir)) {
    // build alias from current path
    $alias = drupal_get_path_alias(current_path());
    $tmp = explode('/', $alias);
    // lob off the file itself in case of folder structure
    if (count($tmp) == 1) {
      $dir = '';
    }
    else {
      array_pop($tmp);
      $dir = implode('/', $tmp) . '/';
    }
  }
  return $dir;
}

/**
 * Implements hook_file_download().
 */
function git_book_markdown_file_download($uri) {
  // see if the file lives in private files
  if ($uri) {
    $file = new stdClass();
    $file->uri = $uri;
    $file->filename = drupal_basename($uri);
    $file->filemime = file_get_mimetype($file->uri);
    $file->filesize = filesize($file->uri);
  }
  return file_get_content_headers($file);
}
