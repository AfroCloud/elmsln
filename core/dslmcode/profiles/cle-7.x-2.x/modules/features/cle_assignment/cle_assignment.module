<?php
/**
 * @file
 * Code for the CLE Assignment feature.
 */
// default assignment color for new ones
define('CLE_ASSIGNMENT_DEFAULT_COLOR', 'aac');

include_once 'cle_assignment.features.inc';

/**
 * Implements hook_menu().
 */
function cle_assignment_menu() {
  $items = array();
  $items['api/v1/cle/assignments'] = array(
    'page callback' => '_elmsln_api_v1_page_callback',
    'page arguments' => array('assignment', NULL, NULL),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['api/v1/cle/assignments/create'] = array(
    'page callback' => '_elmsln_api_v1_page_callback',
    'page arguments' => array('assignment', NULL, 4),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['api/v1/cle/assignments/fields'] = array(
    'page callback' => '_elmsln_api_v1_page_callback',
    'page arguments' => array('assignment', NULL, 4),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['api/v1/cle/assignments/%'] = array(
    'page callback' => '_elmsln_api_v1_page_callback',
    'page arguments' => array('assignment', 4, 'query'),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['api/v1/cle/assignments/%/fields'] = array(
    'page callback' => '_elmsln_api_v1_page_callback',
    'page arguments' => array('assignment', 4, 5),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['api/v1/cle/assignments/%/update'] = array(
    'page callback' => '_elmsln_api_v1_page_callback',
    'page arguments' => array('assignment', 4, 'update'),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['api/v1/cle/assignments/%/delete'] = array(
    'page callback' => '_elmsln_api_v1_page_callback',
    'page arguments' => array('assignment', 4, 'delete'),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_elmsln_jsapi_info().
 */
function cle_assignment_elmsln_jsapi_info() {
  // assignment api router
  $items['assignment'] = array(
    'type'   => 'node',
    'bundle' => 'cle_assignment',
    'modify' => '_cle_assignment_v1_assignment_modify',
    'list'   => '_cle_assignment_v1_get_assignments',
    'output' => '_cle_assignment_v1_assignment_output',
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cle_assignment_form_cle_assignment_node_form_alter(&$form, &$form_state, $form_id) {
  unset($form['body']['und'][0]['summary']);
}

/**
 * Implements hook_page_build().
 */
function cle_assignment_page_build(&$page) {
  if (arg(0) == 'node' && arg(2) == 'assignment_bulk') {
    $file = 'assignment_bulk';
    $path = drupal_get_path('module', 'cle_assignment') . '/';
    drupal_add_js($path . 'js/' . $file . '.js');
    drupal_add_css($path . 'css/' . $file . '.css');
  }
  $node = menu_get_object();
  if ($node && $node->type == 'cle_assignment' && arg(2) != 'edit') {
    $field_conditions = array('field_assignment' => array('target_id', array($node->nid), 'IN'));
    $submission = _cis_connector_assemble_entity_list('node', 'cle_submission', 'nid', 'title', $field_conditions, array('uid' => $GLOBALS['user']->uid));
    $output = '';
    foreach ($submission as $nid => $title) {
      $output .= l($title, 'node/' . $nid) . ' ';
    }
    if (empty($output)) {
      $output = l(t('Submit assignment'),'node/add/cle-submission', array('query' => array('field_assignment' => $node->nid)));
    }
    $page['content']['assignment_submission'] = array(
      '#markup' => $output,
      '#weight' => 100,
    );
  }
}

/**
 * ELMSLN JSapi callback for creating an assignment.
 * @todo  make this use the full POST data sanitized and in params.
 */
function _cle_assignment_v1_assignment_modify($node, $params = NULL) {
  if (!isset($node->nid)) {
    $detail = t('Assignment created');
  }
  else {
    $detail = t('Assignment updated');
  }
  // loop through supported parameters and set them for create or update
  foreach ($params as $key => $value) {
    // fields we support in a POST
    switch ($key) {
      case 'uid':
      case 'title':
        $node->{$key} = $value;
      break;
    }
  }
  node_save($node);
  // output the newly created node
  $vars = array(
    'status' => '200',
    'detail' => $detail,
    'node' => (array) $node,
  );
  return $vars;
}

/**
 * Helper function that prepares an assignment for api output.
 */
function _cle_assignment_v1_assignment_output($node) {
  // get an array of formatted dates
  $dates = _elmsln_api_format_date_field($node->field_assignment_due_date[LANGUAGE_NONE][0]);

  global $base_url;
  // this will be our json formatted output
  $return = array(
    'id' => (int)$node->nid,
    'title' => $node->title,
    'status' => (int)$node->status,
    'created' => (int)$node->created,
    'body' => $node->field_assignment_description[LANGUAGE_NONE][0]['safe_value'],
    'links' => array(
      'self' => $base_url . '/api/v1/cle/assignments/' . $node->nid,
    ),
    'type' => ($node->field_assignment_privacy_setting ? $node->field_assignment_privacy_setting[LANGUAGE_NONE][0]['value'] : 'open'),
    'startDate' => $dates[0],
    'endDate' => $dates[1],
    // @todo
    // Need to replace static values below
    'dependency' => _cle_api_random(array('none', 'previous', 'parent')),// default: none
    'assets' => _cle_api_random(array('text', 'links', 'video', 'images', 'files'), 2), // unlimited
    'critique' => array(
      'method' => _cle_api_random(array('random', 'partner', 'open')),// default: random
      'style' => _cle_api_random(array('double_blind', 'blind', 'open')),// default: double blind
      'outline' => _cle_api_random(array('', 'Outline A')), //optional @todo: not sure what this is for
      'public' => _cle_api_random(array('public', 'private')), // default: public
    ),
    'complete' => _cle_api_random(array(0,1)), // determines whether the assignment is complete.
  );

  return $return;
}

/**
 * @todo
 * Get all of the assignments for the current user
 * - Make sure that they are seeing assignments for their current section
 */
function _cle_assignment_v1_get_assignments($filter = array()) {
  $items = array();
  $field_conditions = array();
  $property_conditions = array('status' => array(NODE_PUBLISHED, '='));
  if (isset($filter['assignment'])) {
    $property_conditions['nid'] = array($filter['assignment'], '=');
  }
  $orderby = array();
  $items = _cis_connector_assemble_entity_list('node', 'cle_assignment', 'nid', '_entity', $field_conditions, $property_conditions, $orderby);
  return $items;
}
