<?php
/**
 * @file
 * Code for the CLE Assignment feature.
 */
// default assignment color for new ones
define('CLE_ASSIGNMENT_DEFAULT_COLOR', 'aac');

include_once 'cle_assignment.features.inc';

/**
 * Implements hook_menu().
 */
function cle_assignment_menu() {
  $items = array();
  $items['api/v1/cle/assignments'] = array(
    'page callback' => '_elmsln_api_v1_page_callback',
    'page arguments' => array('assignment'),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['api/v1/cle/assignments/%'] = array(
    'page callback' => '_elmsln_api_v1_page_callback',
    'page arguments' => array('assignment', 4),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_elmsln_jsapi_info().
 */
function cle_assignment_elmsln_jsapi_info() {
  // assignment api router
  $items['assignment'] = array(
    'list' => '_cle_assignment_v1_get_assignments',
    'output' => '_cle_assignment_v1_assignment_output',
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cle_assignment_form_cle_assignment_node_form_alter(&$form, &$form_state, $form_id) {
  unset($form['body']['und'][0]['summary']);
}

/**
 * Implements hook_init().
 */
function cle_assignment_init() {
  if (arg(0) == 'node' && arg(2) == 'assignment_bulk') {
    $file = 'assignment_bulk';
    $path = drupal_get_path('module', 'cle_assignment') . '/';
    drupal_add_js($path . 'js/' . $file . '.js');
    drupal_add_css($path . 'css/' . $file . '.css');
  }
}

/**
 * Implements hook_page_build().
 */
function cle_assignment_page_build(&$page) {
  $node = menu_get_object();
  if ($node && $node->type == 'cle_assignment' && arg(2) != 'edit') {
    $field_conditions = array('field_assignment' => array('target_id', array($node->nid), 'IN'));
    $submission = _cis_connector_assemble_entity_list('node', 'cle_submission', 'nid', 'title', $field_conditions, array('uid' => $GLOBALS['user']->uid));
    $output = '';
    foreach ($submission as $nid => $title) {
      $output .= l($title, 'node/' . $nid) . ' ';
    }
    if (empty($output)) {
      $output = l(t('Submit assignment'),'node/add/cle-submission', array('query' => array('field_assignment' => $node->nid)));
    }
    $page['content']['assignment_submission'] = array(
      '#markup' => $output,
      '#weight' => 100,
    );
  }
}

/**
 * Implements hook_node_insert().
 */
function cle_assignment_node_insert($node) {
  // make sure there's an outline associated to this
  // but only if we have at least 1 to do so with
  if ($node->type == 'cle_assignment') {
    // add this assignment to the master section assignment list automatically
    if ($gid = _cis_section_load_section_by_id(CIS_SECTION_MASTER)) {
      // this case can be triggered if the dates get updated downstream in CIS
      // or if we create something ahead of the semester
      $section = node_load($gid);
      $section->field_cle_assignments['und'][] = array('target_id' => $node->nid);
      node_save($section);
    }
  }
}

/**
 * Page Callback to return either a single assignment or a method.
 */
function _cle_assignment_v1_cle_assignment($argument) {
  // Check if the argument is a verb a.k.a an endpoint method
  // if it is numeric then that means we are targeting an assignment ID
  if (is_numeric($argument)) {
    _cle_assignment_v1_cle_assignment_id($argument);
  }
  // check and see if we are dealing with any of the known verbs/method
  else {
    switch ($argument) {
      case 'create':
        // initialize the create assignment method
        _cle_assignment_v1_assignment_create();
        break;
    }
  }

  // if it got this far then that means there was an invalid argument in the url
  $vars = array(
    'status' => '400',
    'detail' => 'Invalid endpoint argument',
  );
  _elmsln_api_deliver_output($vars);
}

/**
 * @todo: Need to make this endopint handle POST requests to create assignments
 *        - needs to accept a custom data that looks like the generated output
 *          of this function _cle_assignment_v1_assignment_output();
 */
function _cle_assignment_v1_assignment_create() {
  // output the newly created assignment
  $vars = array(
    'status' => '200',
    'detail' => 'Assignment created',
    'assignment' => array(
      'id' => 43 // the node id of the assignment
    )
  );
  _elmsln_api_deliver_output($vars);
}

/**
 * Helper function to output a single assignment
 */
function _cle_assignment_v1_cle_assignment_id($assignment_id) {
  $vars = array();
  // load the assignment
  $assignment = node_load($assignment_id);
  // get the assignment ready for sending
  $assignment_apiformat = _cle_assignment_v1_assignment_output($assignment);

  // assemble the call
  $vars['links'] = array(
    'self' => $base_url . '/api/v1/cle/assignments',
  );
  // place the formatted assignment under the 'data' property
  $vars['data'] = $assignment_apiformat;

  _elmsln_api_deliver_output($vars);
}

/**
 * Helper function that prepares an assignment for api output.
 */
function _cle_assignment_v1_assignment_output($node) {
  // get an array of formatted dates
  $dates = _cle_api_format_date_field($node->field_assignment_due_date[LANGUAGE_NONE][0]);

  global $base_url;
  // this will be our json formatted output
  $return = array(
    'id' => (int)$node->nid,
    'title' => $node->title,
    'status' => (int)$node->status,
    'created' => (int)$node->created,
    'body' => $node->field_assignment_description[LANGUAGE_NONE][0]['safe_value'],
    'links' => array(
      'self' => $base_url . '/api/v1/cle/assignments/' . $node->nid,
    ),
    'type' => ($node->field_assignment_privacy_setting ? $node->field_assignment_privacy_setting[LANGUAGE_NONE][0]['value'] : 'open'),
    'startDate' => $dates[0],
    'endDate' => $dates[1],
    // @todo
    // Need to replace static values below
    'dependency' => _cle_api_random(array('none', 'previous', 'parent')),// default: none
    'assets' => _cle_api_random(array('text', 'links', 'video', 'images', 'files'), 2), // unlimited
    'critique' => array(
      'method' => _cle_api_random(array('random', 'partner', 'open')),// default: random
      'style' => _cle_api_random(array('double_blind', 'blind', 'open')),// default: double blind
      'outline' => _cle_api_random(array('', 'Outline A')), //optional @todo: not sure what this is for
      'public' => _cle_api_random(array('public', 'private')), // default: public
    ),
    'complete' => _cle_api_random(array(0,1)), // determines whether the assignment is complete.
  );

  return $return;
}

/**
 * @todo
 * Get all of the assignments for the current user
 * - Make sure they have permission to see assignments
 * - Make sure that they are seeing assignments for their current section
 */
function _cle_assignment_v1_get_assignments($filter = array()) {
  $items = array();
  $field_conditions = array();
  if (isset($filter['project'])) {
    $field_conditions = array('field_assignment_project' => array('target_id', $filter['project'], '='));
  }
  $property_conditions = array('status' => array(NODE_PUBLISHED, '='));
  $orderby = array();
  $list = _cis_connector_assemble_entity_list('node', 'cle_assignment', 'nid', 'title', $field_conditions, $property_conditions, $orderby);
  if (!empty($list)) {
    $nids = array_keys($list);
    $items = entity_load('node', $nids);
  }
  return $items;
}
