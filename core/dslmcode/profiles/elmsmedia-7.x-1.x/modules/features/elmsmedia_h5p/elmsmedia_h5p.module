<?php
/**
 * @file
 * Code for the ELMSMedia H5P feature.
 */

include_once 'elmsmedia_h5p.features.inc';


/**
 * Implementation of hook_form_h5p_library_upload_form_alter().
 */
function elmsmedia_h5p_form_h5p_library_upload_form_alter(&$form, &$form_state, $form_id) {
  /* Your code here */
  drupal_set_message(t('You can get the latest copy of H5P <a href="@link">from here</a>.', array('@link' => 'https://h5p.org/sites/default/files/official-h5p-release-20170313.h5p')), 'status');
}

/**
 * Implements hook_page_build().
 */
function elmsmedia_h5p_page_build(&$page) {
  drupal_add_css(drupal_get_path('module', 'elmsmedia_h5p') . '/elmsmedia_h5p.css', array('group' => CSS_THEME, 'weight' => 1000));
  // allow for h5p tincan bridge to still work when in entity iframe mode
  if (arg(0) == 'entity_iframe' && arg(1) == 'node') {
    $data = array(
      'h5pTincanBridge' => array(
        'nid' => arg(2),
        'token' => drupal_get_token(),
        'relayUrl' => base_path() . H5P_TINCAN_BRIDGE__RELAY_URL,
        'reduceStatements' => H5P_TINCAN_BRIDGE__REDUCE_STATEMENTS,
      )
    );
    drupal_add_js($data, 'setting');
    // our custom event listener for frame events talking to this domain
    // this helps us provide context of where the interaction was in use at
    // the time of display
    drupal_add_js(drupal_get_path('module', 'elmsmedia_h5p') . '/js/elmsmedia-xapi-listener.js', array('weight' => -1000));
    drupal_add_js(drupal_get_path('module', 'h5p_tincan_bridge') . '/h5p_tincan_bridge.js', array('weight' => 1000));
  }
}

/**
 * Implements hook_embedded_h5p_alter().
 */
function elmsmedia_h5p_embedded_h5p_alter(&$node) {
  // append domain partcial if we can for avoiding XSS blocking on same origin root
  if ($domain = _cis_connector_parent_domain()) {
    print '<script>document.domain = "' . $domain . '"</script>';
  }
}

/**
 * Implements hook_replicate_ui_access_check_alter().
 */
function elmsmedia_h5p_replicate_ui_access_check_alter(&$access, $type, $entity) {
  // H5p can't be replicated as its too complex to do via this manner
  if ($type == 'node' && $entity->type == 'h5p_content') {
    $access = FALSE;
  }
}

/**
 * Impliments hook_h5p_filtered_params_alter
 *
 * Replace H5P's text filter with Drupal's xss filter.
 */
function elmsmedia_h5p_h5p_filtered_params_alter(&$filtered) {
  // Get the list of allowed tags
  $allowed_tags = variable_get('elmsln_h5p_allowed_tags', array());
  $allowed_tags = _elmsmedia_variable_formatter($allowed_tags);
  drupal_alter('elmsln_h5p_allowed_tags', $allowed_tags);
  // support filtering questions
  if (isset($filtered->questions)) {
    // find questions and answers
    foreach ($filtered->questions as &$choice) {
      // decode H5P's escaping
      if (is_string($choice->params->question)) {
        $choice->params->question = html_entity_decode($choice->params->question);
        // run it through drupal's xss filter but whitelist our allowed tags
        $choice->params->question = filter_xss($choice->params->question, $allowed_tags);
      }
      if (isset($choice->params->answers)) {
        foreach ($choice->params->answers as &$answer) {
          // decode H5P's escaping
          $answer->text = html_entity_decode($answer->text);
          // run it through drupal's xss filter but whitelist our allowed tags
          $answer->text = filter_xss($answer->text, $allowed_tags);
        }
      }
    }
  }
  else if (isset($filtered->question)) {
    // decode H5P's escaping
    $filtered->question = html_entity_decode($filtered->question);
    // run it through drupal's xss filter but whitelist our allowed tags
    $filtered->question = filter_xss($filtered->question, $allowed_tags);
    if (isset($filtered->answers)) {
      foreach ($filtered->answers as &$answer) {
        // decode H5P's escaping
        $answer->text = html_entity_decode($answer->text);
        // run it through drupal's xss filter but whitelist our allowed tags
        $answer->text = filter_xss($answer->text, $allowed_tags);
      }
    }
  }
}

/**
 * Helper function to format the form values to variable arrays
 * @param  [mixed: string or array] Either array or comma separated string that will be converted an array.
 * @return [array]
 */
function _elmsmedia_variable_formatter($variable) {
  $array = array();
  if (is_string($variable)) {
    // trim the whitespace from the attributes
    $variable = explode(',', $variable);
    foreach ($variable as $key => $value) {
      $array[$key] = trim($value);
    }
  }
  elseif (is_array($variable)) {
    $array = $variable;
  }

  return $array;
}